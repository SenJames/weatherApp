{"version":3,"sources":["logo.svg","components/Mainview.js","components/Side.js","App.js","reportWebVitals.js","index.js"],"names":["Mainview","color","details","loc","weathIcon","weather","icon","weathIconUser","d","Date","utc","getTime","getTimezoneOffset","OpenApiOffset","timezone","userLocationOffset","end","className","style","Object","keys","length","main","temp","toPrecision","name","getDay","getMonth","getFullYear","getHours","getMinutes","getSeconds","src","alt","Side","receiveDate","useState","val","setValue","setWeather","onSubmit","e","preventDefault","alert","url","process","axios","get","then","response","data","catch","error","console","log","onClick","type","value","onChange","target","placeholder","backgroundColor","height","clouds","all","humidity","wind","speed","rain","id","App","setVal","location","setlocation","setStatus","useEffect","navigator","geolocation","getCurrentPosition","position","lon","lat","makeCall","coords","longitude","latitude","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237c75b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from 'react'\r\nimport { BsCloudRainHeavy } from \"react-icons/bs\";\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\nconst Mainview = ({ color, details, loc }) => {\r\n    // console.log(details)\r\n    const weathIcon = `http://openweathermap.org/img/w/${details.weather && details.weather[0].icon}.png`\r\n    const weathIconUser = `http://openweathermap.org/img/w/${loc.weather && loc.weather[0].icon}.png`\r\n\r\n    const d = new Date()\r\n    const localTime = d.getTime()\r\n    const localOffset = d.getTimezoneOffset() * 60000\r\n    const utc = localTime + localOffset\r\n    const OpenApiOffset = details.timezone\r\n    const userLocationOffset = loc.timezone\r\n    const newDate = utc + (1000 * OpenApiOffset ? OpenApiOffset :userLocationOffset)\r\n    const end = new Date(newDate)\r\n\r\n    return (\r\n        <div className=\"main-view\" style={{'color':color}}>\r\n            <div className=\"degree\">\r\n                <p className=\"degree-number\">{Object.keys(details).length > 0 ? (details.main.temp/10).toPrecision(2) : Object.keys(loc).length > 0 ? (loc.main.temp/10).toPrecision(2): \"00\"}</p>\r\n                <p className=\"degree-number1\">o</p> \r\n            </div>\r\n            <div className=\"location\">\r\n                <p className=\"location-tag\">{Object.keys(details).length > 0 ? details.name : Object.keys(loc).length > 0 ? loc.name :'London'}</p>\r\n                <p className=\"location-time\">{`Timezone: ${Object.keys(details).length > 0 ? `${end.getDay()}-${end.getMonth()}-${end.getFullYear()} || ${end.getHours()}: ${end.getMinutes()}: ${end.getSeconds()}` :  Object.keys(loc).length > 0 ? `${end.getDay()}-${end.getMonth()}-${end.getFullYear()} || ${end.getHours()}: ${end.getMinutes()}: ${end.getSeconds()}` : '06:09'}`}</p>\r\n            </div>\r\n            <div className=\"icon\">\r\n                <div>\r\n                    { Object.keys(details).length > 0 ? <img src={weathIcon} alt=\"\"/> : Object.keys(loc).length > 0 ?  <img src={weathIconUser} alt=\"\"/> : <BsCloudRainHeavy />}\r\n                </div>\r\n                {Object.keys(details).length > 0  ? `${details.weather && details.weather[0].main}`: Object.keys(loc).length > 0  ? `${loc.weather && loc.weather[0].main}` :\"weather\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mainview\r\n","import React from 'react'\r\nimport { BsSearch } from \"react-icons/bs\"\r\nimport { useState } from 'react'\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst Side = ({ receiveDate, loc }) => {\r\n\r\n    const [val, setValue] = useState(\"\")\r\n    const [weather, setWeather] = useState([])\r\n    \r\n    // API CALL\r\n    const APIKEY = process.env.REACT_APP_API_KEY\r\n\r\n\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault()\r\n\r\n        if (!val){\r\n            alert(\"Please enter location\")\r\n        }\r\n        \r\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${val}&appid=${APIKEY}`\r\n\r\n        axios.get(url).then((response) => {\r\n            setWeather(response.data);\r\n          }).catch(error => {\r\n           console.log(error)\r\n          });\r\n        setValue(\"\")\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"side\">\r\n            <form className=\"formClass\" onSubmit={onSubmit} onClick={receiveDate(weather)}>\r\n                <div className=\"searchdets\">                       \r\n                    <input type=\"text\" value={val}  onChange={(e)=>{setValue(e.target.value)}} placeholder=\"Another Location\"/>\r\n                    <button type=\"submit\" className=\"search\">\r\n                        <BsSearch />\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <p className=\"other_loc\">{loc.length > 0 ? loc.name : weather ? weather.name : <p className=\"other_loc\">Birmingham</p>  }</p>\r\n                {/* <p className=\"other_loc\">Birmingham</p> */}\r\n                {/* <p className=\"other_loc\">Birmingham</p>\r\n                <p className=\"other_loc\">Birmingham</p> */}\r\n            </div>\r\n            <hr style={{ color: \"white\",\r\n            backgroundColor: \"white\",\r\n            height: 2}}/>\r\n            <div className=\"weatherDiv\">\r\n                <p className=\"weather_dets\">Weather Details</p>\r\n                {\r\n                    weather.length <= 0 ? (\r\n                        <div className=\"weather\">\r\n                            <p className=\"weather_cond\">Cloudy</p>\r\n                            <p className=\"weather_percent\">{loc.clouds ? `${loc.clouds.all}%`  : \"None\"}</p>\r\n                            <p className=\"weather_cond\">Humidity</p>\r\n                            <p className=\"weather_percent\">{loc.main ? `${loc.main.humidity}%` : \"None\"}</p>\r\n                            <p className=\"weather_cond\">Wind</p>\r\n                            <p className=\"weather_percent\">{loc.wind ? `${loc.wind.speed}km/h` : \"None\"}</p>\r\n                            <p className=\"weather_cond\">Rain</p>\r\n                            <p className=\"weather_percent\">{loc.rain ? `${loc.rain[\"1h\"]}mm` : \"None\"}</p>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"weather\" key={weather.id}>\r\n                            <p className=\"weather_cond\">Cloudy</p>\r\n                            <p className=\"weather_percent\">{weather.clouds.all}%</p>\r\n                            <p className=\"weather_cond\">Humidity</p>\r\n                            <p className=\"weather_percent\">{weather.main.humidity}%</p>\r\n                            <p className=\"weather_cond\">Wind</p>\r\n                            <p className=\"weather_percent\">{weather.wind.speed}km/h</p>\r\n                            <p className=\"weather_cond\">Rain</p>\r\n                            <p className=\"weather_percent\">{weather.rain && weather.rain['1h']}mm</p>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Side\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Mainview from './components/Mainview';\nimport Side from './components/Side';\nimport { useState, useEffect } from 'react'\nimport APIKEY from './components/Side';\nimport axios from \"axios\";\n\n\nfunction App() {\n  const [val, setVal] = useState([])\n  const [location, setlocation] = useState([])\n  const [status, setStatus] = useState(null)\n\n\n  const receiveDate = (weather) => {\n    setVal(weather)\n\n  }\n\n\n  const APIKEY = process.env.REACT_APP_API_KEY\n\n  const makeCall =(lon, lat)=>{\n    const url = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKEY}`\n    console.log(lon,\" \", lat)\n\n        axios.get(url).then((response) => {\n            setlocation(response.data);\n          }).catch(error => {\n           console.log(error)\n          });\n  }\n\n  useEffect(() => {\n    const getPresentLocation = () => {\n      if (!navigator.geolocation) {\n        setStatus('Geolocation is not supported by your browser');\n      } else {\n        setStatus('Locating...');\n        navigator.geolocation.getCurrentPosition((position) => {\n          setStatus(null);\n          makeCall(position.coords.longitude, position.coords.latitude)\n          \n        }, () => {\n          setStatus('Unable to retrieve your location');\n        });\n      }\n    }\n    getPresentLocation()\n    \n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <section className='main'>\n        <div className='left'>\n          <p className=\"webName\">jamie.weather</p>\n        <div className=\"bottomview\">\n          <Mainview color=\"white\"  loc={location} details={val.name === \"\"  ? {} : val}/>\n        </div>\n        </div>\n        <div className='right'>\n          <div className=\"right-slide\">\n            <Side receiveDate={receiveDate} loc={location}/> \n          </div>\n          <div className='bgImage' alt='sidebar'> \n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}